private static String cleanLine (String raw) {
	String clean;
	int commentlocation;
	
	// remove whitespace
	clean = raw.replaceAll(" ","");
	clean = clean.replaceAll("\t","");

	// remove comments
	commentLocation = clean.IndexOf("//");
	if(commentLocation != -1) {
		clean = clean.substring(0,commentLocation);
	}

	return clean;
}

private static char parseCommandType(String clean) {

	if(clean = null || clean.length() == 0) {
		return NO_COMMAND; \\N
	}
	
	char first = clean.charAt(0);
	if (first = '(') {
		return L_COMMAND; \\ L
	} else if (first == '@') {
		return A_COMMAND; \\ A
	} else {
		return C_COMMAND; \\ C
	}
}

private static String decimalToBinary (int toConvert) {
	StringBuilder sb = new StringBuilder();
	for(int i = 0; i<15;i++) {

	if(toConvert % 2 == 0) {
		sb.append("0");
	} else {
		sb.append("1");
	}
	toConvert /= 2;
}

	return sb.reverse();
}

private static boolean isValidSymbol (String symbol) {

ALL_VALID_CHARS = "......";

for(char c: symbol) {
if(ALL_VALID_CHARS.indexOf(c) == -1 ) {
	return false
}
}