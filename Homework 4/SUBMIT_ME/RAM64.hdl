// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=load,sel=address[3..5],a=ram8a,b=ram8b,c=ram8c,d=ram8d,e=ram8e,f=ram8f,g=ram8g,h=ram8h);
	RAM8(in=in,load=ram8a,address=address[0..2],out=ram8aout);
	RAM8(in=in,load=ram8b,address=address[0..2],out=ram8bout);
	RAM8(in=in,load=ram8c,address=address[0..2],out=ram8cout);
	RAM8(in=in,load=ram8d,address=address[0..2],out=ram8dout);
	RAM8(in=in,load=ram8e,address=address[0..2],out=ram8eout);
	RAM8(in=in,load=ram8f,address=address[0..2],out=ram8fout);
	RAM8(in=in,load=ram8g,address=address[0..2],out=ram8gout);
	RAM8(in=in,load=ram8h,address=address[0..2],out=ram8hout);
	Mux8Way16(a=ram8aout,b=ram8bout,c=ram8cout,d=ram8dout,e=ram8eout,f=ram8fout,g=ram8gout,h=ram8hout,sel=address[3..5],out=out);
}